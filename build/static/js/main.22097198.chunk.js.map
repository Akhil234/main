{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","crypto","require","GetAllBankAccounts","props","parseInt","bankcount","banks","map","bank","key","address","GetAllBankRequests","bankrequests","request","name","show","target","document","getElementsByClassName","style","display","elements","querySelectorAll","i","length","classList","remove","hideAll","getElementById","add","App","state","account","contract","aadhar","pan","getdata","data_hash","b_name","bank_verify","entity","allaccounts","allbanks","bank_count","status","requestAddress","aadharVerify","panVerify","verified","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","KycBlockChain","networks","instance","Contract","abi","setState","whoami","numbanks","onAccountChanged","alert","error","myNameChangeHandler","event","value","myAadharChangeHandler","myPanChangeHandler","myBankNameChangeHandler","bname","myDataChangeHandler","myData1ChangeHandler","myData2ChangeHandler","myVBankChangeHandler","requestAddressChange","on","location","reload","methods","isCus","call","from","cus","isOrg","org","who","createmycustomer","newCustomer","createHash","update","digest","send","then","createmybank","newOrganisation","verifykycfromcustomer","viewCustomerData","response","get","create_customer","e","preventDefault","create_bank","access","ifcustomer","modify_data","modifyCustomerData","bankslength","len","Banks","push","getmystatus","checkStatus","viewRequests","reqs","all_reqs","req","viewName","accept","changeStatusToAccepted","changeStatusToRejected","this","className","onClick","id","action","method","onSubmit","type","onChange","Component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22097198.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport KycBlockChain from \"./contracts/KycBlockChain.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nconst crypto = require(\"crypto\");\n\nconst GetAllBankAccounts = (props) => {\n  if (parseInt(props.bankcount) > 0) {\n    return (\n      <div>\n        {props.banks.map((bank) => (\n          <p key={bank.key}>{bank.address}</p>\n        ))}\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <p>There are no verified Bank Accounts in this network!</p>\n      </div>\n    );\n  }\n};\n\nconst GetAllBankRequests = (props) => {\n  return (\n    <div>\n      {props.bankrequests.map((request) => (\n        <p key={request.key}>\n          {request.name} - {request.address}\n        </p>\n      ))}\n    </div>\n  );\n};\n//------tab navigation starts here--------\nconst hideAll = () => {\n  document.getElementsByClassName(\"new-customer\")[0].style.display = \"none\";\n  document.getElementsByClassName(\"existing-customer\")[0].style.display =\n    \"none\";\n  document.getElementsByClassName(\"existing-customer\")[1].style.display =\n    \"none\";\n  document.getElementsByClassName(\"new-bank\")[0].style.display = \"none\";\n  document.getElementsByClassName(\"existing-bank\")[0].style.display = \"none\";\n  document.getElementsByClassName(\"existing-bank\")[1].style.display = \"none\";\n  let elements = document.querySelectorAll(\".active-button\");\n  for (var i = 0; i < elements.length; i++) {\n    elements[i].classList.remove(\"active-button\");\n  }\n};\nconst show = (target) => {\n  hideAll();\n  document.getElementById(`${target}-button`).classList.add(\"active-button\");\n  if (target === \"new-customer\") {\n    document.getElementsByClassName(\"new-customer\")[0].style.display = \"block\";\n  }\n  if (target === \"existing-customer\") {\n    document.getElementsByClassName(\"existing-customer\")[0].style.display =\n      \"block\";\n    document.getElementsByClassName(\"existing-customer\")[1].style.display =\n      \"block\";\n  }\n  if (target === \"existing-bank\") {\n    document.getElementsByClassName(\"existing-bank\")[0].style.display = \"block\";\n    document.getElementsByClassName(\"existing-bank\")[1].style.display = \"block\";\n  }\n  if (target === \"new-bank\") {\n    document.getElementsByClassName(\"new-bank\")[0].style.display = \"block\";\n  }\n};\n//------tab navigation ends here--------\n\n//setting state values\nclass App extends Component {\n  state = {\n    web3: null,\n    account: null,\n    contract: null,\n    name: null,\n    aadhar: null,\n    pan: null,\n    getdata: null,\n    data_hash: null,\n    b_name: null,\n    bank_verify: null,\n    entity: null,\n    allaccounts: null,\n    allbanks: [],\n    bank_count: 0,\n    status: null,\n    requestAddress: null,\n    bankrequests: [],\n    aadharVerify: null,\n    panVerify: null,\n    verified: null,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = KycBlockChain.networks[networkId];\n      const instance = new web3.eth.Contract(\n        KycBlockChain.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3,\n        account: accounts[0],\n        contract: instance,\n        allaccounts: accounts,\n      });\n      this.whoami();\n      this.numbanks();\n      this.onAccountChanged();\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n    show(\"new-customer\");\n  };\n\n  myNameChangeHandler = (event) => {\n    this.setState({ name: event.target.value });\n  };\n  myAadharChangeHandler = (event) => {\n    this.setState({ aadhar: event.target.value });\n  };\n  myPanChangeHandler = (event) => {\n    this.setState({ pan: event.target.value });\n  };\n\n  myBankNameChangeHandler = (event) => {\n    this.setState({ bname: event.target.value });\n  };\n\n  myDataChangeHandler = (event) => {\n    this.setState({ getdata: event.target.value });\n  };\n\n  myData1ChangeHandler = (event) => {\n    this.setState({ aadharVerify: event.target.value });\n  };\n\n  myData2ChangeHandler = (event) => {\n    this.setState({ panVerify: event.target.value });\n  };\n\n  myVBankChangeHandler = (event) => {\n    this.setState({ bank_verify: event.target.value });\n  };\n\n  requestAddressChange = (event) => {\n    this.setState({ requestAddress: event.target.value });\n  };\n\n  onAccountChanged = () => {\n    window.ethereum.on(\"accountsChanged\", () => {\n      window.location.reload();\n    });\n  };\n\n  whoami = async () => {\n    var { contract } = this.state;\n    const cus = await contract.methods\n      .isCus()\n      .call({ from: this.state.account });\n    const org = await contract.methods\n      .isOrg()\n      .call({ from: this.state.account });\n\n    var who = cus ? \"Customer\" : org ? \"Bank\" : \"None\";\n    this.setState({ entity: who });\n  };\n\n  createmycustomer = async () => {\n    var { contract } = this.state;\n    await contract.methods\n      .newCustomer(\n        this.state.name,\n        crypto\n          .createHash(\"sha1\")\n          .update(this.state.aadhar + this.state.pan)\n          .digest(\"hex\"),\n        this.state.bank_verify\n      )\n      .send({ from: this.state.account })\n      .then(() => {\n        window.alert(\"You successfully made an account!\");\n        window.location.reload();\n      });\n  };\n\n  createmybank = async () => {\n    var { contract } = this.state;\n\n    await contract.methods\n      .newOrganisation(this.state.bname)\n      .send({ from: this.state.account })\n      .then(() => {\n        window.alert(\"You are now a verified Bank Entity!\");\n        window.location.reload();\n      });\n  };\n\n  verifykycfromcustomer = async () => {\n    var { contract } = this.state;\n    const response = await contract.methods\n      .viewCustomerData(this.state.getdata)\n      .call({ from: this.state.account });\n\n    this.setState({ data_hash: response });\n\n    const dhash = crypto\n      .createHash(\"sha1\")\n      .update(this.state.aadharVerify + this.state.panVerify)\n      .digest(\"hex\");\n\n    if (dhash === this.state.data_hash) {\n      this.setState({ verified: \"Success\" });\n    } else {\n      this.setState({ verified: \"Fail\" });\n    }\n  };\n\n  get = async () => {\n    var { contract } = this.state;\n    var access = await contract.methods\n      .isOrg()\n      .call({ from: this.state.account });\n    if (access) {\n      this.verifykycfromcustomer();\n    } else {\n      window.alert(\"You are not a verified Bank!\");\n    }\n  };\n\n  create_customer = async (e) => {\n    e.preventDefault();\n    var { contract } = this.state;\n    var access = await contract.methods\n      .isCus()\n      .call({ from: this.state.account });\n\n    if (!access) {\n      this.createmycustomer();\n      this.whoami();\n    } else {\n      window.alert(\"You already have an account!\");\n    }\n  };\n\n  create_bank = async (e) => {\n    e.preventDefault();\n    var { contract } = this.state;\n    var access = await contract.methods\n      .isOrg()\n      .call({ from: this.state.account });\n\n    var ifcustomer = await contract.methods\n      .isCus()\n      .call({ from: this.state.account });\n\n    if (!access && !ifcustomer) {\n      this.createmybank();\n      this.whoami();\n    } else if (ifcustomer) {\n      window.alert(\"Customer entities cannot be a bank!\");\n    } else {\n      window.alert(\"You are already a bank!\");\n    }\n  };\n\n  modify_data = async (e) => {\n    e.preventDefault();\n    var { contract } = this.state;\n    var confirm = await contract.methods\n      .isCus()\n      .call({ from: this.state.account });\n    if (confirm) {\n      await contract.methods\n        .modifyCustomerData(\n          this.state.name,\n          crypto\n            .createHash(\"sha1\")\n            .update(this.state.name + this.state.aadhar + this.state.pan)\n            .digest(\"hex\"),\n          this.state.bank_verify\n        )\n        .send({ from: this.state.account })\n        .then(() => {\n          window.alert(\"Data Changed!\");\n          window.location.reload();\n        });\n    } else {\n      window.alert(\"You are not permitted to use this function!\");\n    }\n  };\n\n  numbanks = async () => {\n    var { contract } = this.state;\n    var len = await contract.methods.bankslength().call();\n    this.setState({ bank_count: len });\n    var banks = [];\n    if (parseInt(this.state.bank_count) > 0) {\n      for (var i = 0; i < len; i++) {\n        banks.push({\n          key: i,\n          address: await contract.methods.Banks(i).call(),\n        });\n      }\n    }\n\n    this.setState({ allbanks: banks });\n  };\n\n  getmystatus = async () => {\n    var { contract } = this.state;\n    var status = await contract.methods\n      .checkStatus()\n      .call({ from: this.state.account });\n\n    if (status === \"0\") {\n      this.setState({ status: \"Accepted\" });\n    } else if (status === \"1\") {\n      this.setState({ status: \"Rejected\" });\n    } else if (status === \"2\") {\n      this.setState({ status: \"Pending\" });\n    } else {\n      this.setState({ status: \"Undefined\" });\n    }\n  };\n\n  viewRequests = async () => {\n    var { contract } = this.state;\n    var reqs = await contract.methods.viewRequests().call({\n      from: this.state.account,\n    });\n    var all_reqs = [];\n    var i = 0;\n    for (const req in reqs) {\n      all_reqs.push({\n        key: i,\n        address: reqs[req],\n        name: await contract.methods.viewName(reqs[req]).call(),\n      });\n      i++;\n    }\n    this.setState({ bankrequests: all_reqs });\n  };\n\n  accept = async () => {\n    var { contract } = this.state;\n    await contract.methods\n      .changeStatusToAccepted(this.state.requestAddress)\n      .send({ from: this.state.account })\n      .then(\n        () => {\n          window.alert(\"Status Changed!\");\n          window.location.reload();\n        },\n        () => {\n          window.alert(\"You are not authorized!\");\n        }\n      );\n  };\n\n  reject = async () => {\n    var { contract } = this.state;\n    await contract.methods\n      .changeStatusToRejected(this.state.requestAddress)\n      .send({ from: this.state.account })\n      .then(\n        () => {\n          window.alert(\"Status Changed!\");\n          window.location.reload();\n        },\n        () => {\n          window.alert(\"You are not authorized!\");\n        }\n      );\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <div className=\"App\">\n        <h2>Current Account is a {this.state.entity} entity</h2>\n        <h3>{this.state.account}</h3>\n        <div className=\"form-top-padding\">\n        <fieldset>\n          <div className=\"form-title\">\n            <strong>\n            Verified Organisation Addresses\n            </strong>\n            </div>\n          <GetAllBankAccounts\n            bankcount={this.state.bank_count}\n            banks={this.state.allbanks}\n          />\n        </fieldset>\n        </div>\n   \n        <div className=\"main-buttons-container form-top-padding form-bottom-padding\">\n          <button\n            onClick={() => {\n              show(\"new-customer\");\n            }}\n            id=\"new-customer-button\"\n          >\n            New customer\n          </button>\n          <button\n            onClick={() => {\n              show(\"existing-customer\");\n            }}\n            id=\"existing-customer-button\"\n          >\n            Existing customer\n          </button>\n          <button\n            onClick={() => {\n              show(\"new-bank\");\n            }}\n            id=\"new-bank-button\"\n          >\n            New Organisation\n          </button>\n          <button\n            onClick={() => {\n              show(\"existing-bank\");\n            }}\n            id=\"existing-bank-button\"\n          >\n            View Organisation internal access\n          </button>\n        </div>\n\n      \n\n        <div className=\"new-customer form-top-padding\">\n          <form action=\".\" method=\"\" onSubmit={this.create_customer}>\n            <fieldset>\n           \n                <div className=\"form-title form-bottom-padding\">\n                <strong>Customer Registration Form (New customers only)</strong>\n                </div>\n\n              <p>\n                <label>Your Name </label>\n                <input type=\"text\" onChange={this.myNameChangeHandler} />\n              </p>\n\n              <p>\n                <label>Your Aadhar </label>\n                <input type=\"text\" onChange={this.myAadharChangeHandler} />\n              </p>\n\n              <p>\n                <label>Your Pan </label>\n                <input type=\"text\" onChange={this.myPanChangeHandler} />\n              </p>\n\n              <p>\n                <label>\n                  Organisation Address you want to verify your data with{\" \"}\n                </label>\n                <input type=\"text\" onChange={this.myVBankChangeHandler} />\n              </p>\n              <p>\n                <input type=\"submit\" name=\"submit\" value=\"Create Customer\" />\n              </p>\n            </fieldset>\n          </form>\n        </div>\n\n        <div className=\"new-bank\">\n          <form action=\".\" method=\"\" onSubmit={this.create_bank}>\n            <fieldset>\n            <div className=\"form-title form-bottom-padding\">\n                <strong>Organisation registration form (New organisations only)</strong>\n                </div>\n              <p>\n                <label>Organisation Name </label>\n                <input type=\"text\" onChange={this.myBankNameChangeHandler} />\n              </p>\n              <p>\n                <input type=\"submit\" name=\"submit\" value=\"Create bank\" />\n              </p>\n            </fieldset>\n          </form>\n        </div>\n\n        <div className=\"existing-customer\">\n          <form action=\".\" method=\"\" onSubmit={this.modify_data}>\n            <fieldset>\n              \n            <div className=\"form-title form-bottom-padding\">\n                <strong>Update existing customer data (existing customers only)</strong>\n             </div>\n              \n              <p>\n                <label>New Name </label>\n                <input type=\"text\" onChange={this.myNameChangeHandler} />\n              </p>\n              <p>\n                <label>New Aadhar </label>\n                <input type=\"text\" onChange={this.myAadharChangeHandler} />\n              </p>\n              <p>\n                <label>New Pan </label>\n                <input type=\"text\" onChange={this.myPanChangeHandler} />\n              </p>\n              <p>\n                <label>New Organisation Verify </label>\n                <input type=\"text\" onChange={this.myVBankChangeHandler} />\n              </p>\n              <p>\n                <input type=\"submit\" name=\"submit\" value=\"Change Data\" />\n              </p>\n            </fieldset>\n          </form>\n        </div>\n\n        <div className=\"existing-bank\">\n          <fieldset>\n          <div className=\"form-title form-bottom-padding\">\n                <strong>Requests</strong>\n             </div>\n            <p>\n              <button onClick={this.viewRequests}>View user Requests</button>\n            </p>\n            <GetAllBankRequests bankrequests={this.state.bankrequests} />\n            <div className=\"form-top-padding\">\n            <p>\n              <label>Request Address </label>\n              <input type=\"text\" onChange={this.requestAddressChange} />\n            </p>\n\n            <p>\n              <button onClick={this.accept} className=\"accept-button\">\n                Accept Request\n              </button>\n\n              <button onClick={this.reject} className=\"reject-button\">\n                Reject Request\n              </button>\n            </p>\n            </div>\n          </fieldset>\n        </div>\n\n        <div className=\"existing-bank\">\n          <br />\n          <div>\n            <label>\n              <strong>Verify Customer Data</strong>\n            </label>\n            <p>\n              <label>Address </label>\n              <input type=\"text\" onChange={this.myDataChangeHandler} />\n            </p>\n            <p>\n              <label>Aadhar </label>\n              <input type=\"text\" onChange={this.myData1ChangeHandler} />\n            </p>\n            <p>\n              <label>Pan </label>\n              <input type=\"text\" onChange={this.myData2ChangeHandler} />\n            </p>\n            <button onClick={this.get}>Verify</button>\n            <p>Verification : {this.state.verified}</p>\n          </div>\n        </div>\n\n        <div className=\"existing-customer\">\n          <br />\n          <div>\n            <label>\n              <strong>View Customer Status</strong>\n            </label>\n            <p>\n              <button onClick={this.getmystatus}>Get Customer Status</button>\n            </p>\n            <p>Customer Status is: {this.state.status}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}